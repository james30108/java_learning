public class Session1 {
    public static void main(String[] args) {
        
        /*
         * class = ต้นแบบวัตถ
         * object = วัตถุหรือสิ่งที่ถูกสร้างขึ้นจากคลาส ประกอบไปด้วยสองส่วนคือ attribute กับ method 
         * attribute (fields) = คุณสมบัติ เช่น ชื่อ, อายุ, ที่อยู่
         * method = ความสามารถในการทำงาน เช่น การทำงานต่างๆ, การกระทำต่างๆต่อระบบ
         * 
         * ----------------------------
         * คุณสมบัติของ OOP
         * 1. การห่อหุ้ม (Encapsulation) = การซ่อนรายละเอียด หรือการสร้างความปลอดภัยให้แก่ข้อมูล
         * 2. การสืบทอดคุณสมบัติ (Inheritance) = การนำคุณสมบัติจากคลาสหนึ่งไปสู่คลาสอีกคลาส เพื่อไปใช้งานต่อ
         * 3. การพ้องรูป (Polymorphism) = เมธอดชื่อเดียวกันแต่สามารถรับอาร์กิวเมนต์แตกต่างกันได้หลายรูปแบบ (overload method)
         * 
         * ----------------------------
         * คีย์เวิร์ด
         * Superclass = คลาสแม่
         * Subclass = คลาสลูก
         * This = ใช้เมื่อต้องการเรียกใช้งานคอนสตรักเตอร์อื่นๆที่อยู่ในคลาสเดียวกัน
         * Super = เมื่อต้องการเรียกคอนสตรักเตอร์ของคลาสแม่ให้ทำงาน โดยจะเรียกใช้งานที่บรรทัดแรกสุดของคอนสตรักเตอร์นั้นๆเท่านั้น
         * 
         * ----------------------------
         * ตัวอย่างการสร้าง class
         * 
         * --- public class Employee ---
         * 
         * modifier = public, protected, package, private
         * data type = String, int, boolean
         * name = ชื่อของคลาส (แรกขึ้นต้นด้วยพิมพ์ใหญ่ และต้องตั้งชื่อเหมือนชื่อไฟล์)
         * 
         * ------------------------------
         * 
         * final
         * หากกำหนดหน้า class จะทำให้ไม่สามารถสืบทอดได้
         * หากกำหนดหน้า method จะทำให้ไม่สามารถท overide ได้
         * หากกำหนดหน้า attribute จะทำให้มีสภาพเหมือนค่าคงที่ ทำให้ไม่สามารถเปลี่ยนแปลงค่าได้
         *
         * ----------------------------
         * 
         * Encapsulation
         * 
         * Access Modifier = ระดับในการเข้าถึงข้อมูล
         * - public = เข้มงวดน้อยที่สุด
         * - protected = ใช้สำหรับการสืบทอดข้อมูล โดยข้อมูลสามารถเข้าถึงได้จากการสืบทอดข้อมูล
         * - private = เข้มงวดมากที่สุด คลาสของตัวมันเองเท่านั้นที่มีสิทธิ์ใช้งานได้ (ทุกอย่างไม่สามารถนำออกมาได้)
         * 
         * Non-access modifire: static
         * - หากนำไปกำหนดหน้า metod จะทำให้สามารถเรียกใช้งาน method ได้โดยไม่ต้องสร้าง object
         * - หากนำไปกำหน้าหน้า attribute จะทำให้สามารถเรียกใช้งานได้โดยไม่ต้องสร้าง object ขึ้นมาก่อน
         * 
         * ----------------------------
         * 
         * Polymorphism
         * 
         * 1.1. Method Overloading
         * = คลาสที่มีเมธอดหลายเมธอดที่ชื่อเหมือนกัน แต่แตกต่างกันที่พารามิเตอร์
         * 
         * 1.2. Method Overriding
         * = การทำให้ method ของคลาสลูกมาทำงานแทนที่ method ขอคลาสแม่ โดยการตั้งชื่อเหมือนกันและใช้พารามิเตอร์เหมือนกัน
         * 
         * 2. Abstract Class
         * 
         * 2.1 abstract 
         * = คีย์เวิร์ดหนึ่งของจาวา สามารถกำหนดให้กับ class หรือ method ก็ได้
         * 
         * 2.2 anstract method 
         * = method ว่างเปล่า ที่จะถูกกำหนดรายละเอียดภายหลัง จะถูกกำหนดรายละเอียดก็ต่อเมื่อ ส่งไปหา class ลูก และให้ class ลูกระบุรายละเอียดอีกที
         * 
         * ----------------------------
         * 
         *  Interface
         * = คลาสที่ถูกสร้างขึ้นมาเพิ่มเติมจากคลาสหลัก
        */ 
    }
}
